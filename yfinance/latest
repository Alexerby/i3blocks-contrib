#!/usr/bin/env python3
# coding=utf-8

import yfinance as yf
import sys

PRICE_CHANGE_PERIOD = 'ytd'  # You can adjust this period as needed

def get_ticker_df(ticker):
    try:
        # Fetch data
        data = yf.Ticker(ticker)

        data = yf.Ticker(ticker)
        open_ytd = data.history(period="ytd")["Open"].iloc[0]
        open_today = data.history(period="1d")["Open"].iloc[0]
        current_price = data.history(period="1d")["Close"].iloc[0]
        
        # Calculate the percentage change
        percent_change_today = ((current_price - open_today) / open_today) * 100
        percent_change_ytd = ((current_price - open_ytd) / open_ytd) * 100
        
        return current_price, percent_change_today, percent_change_ytd
    except Exception as e:
        print("Error fetching data:", e)
        return None, None, None

if __name__ == "__main__":
    # Check that ticker arg is provided
    if len(sys.argv) != 2:
        print("Usage: python script.py <ticker>")
        sys.exit(1)
    
    ticker = sys.argv[1]
    current_price, percent_change_today, percent_change_ytd = get_ticker_df(ticker)
    variables = [current_price, percent_change_today, percent_change_ytd]
    if all(variable is not None for variable in variables):
        # Determine the color and icon based on the percentage change
        color_today = '#3BB92D' if percent_change_today > 0 else '#F7555E'
        color_ytd = '#3BB92D' if percent_change_ytd > 0 else '#F7555E'

        # Icons
        icon_today = 'ðŸ •' if percent_change_today > 0 else 'ðŸ —'

        # Determine amount of decimals
        if current_price > 100:
            decimal_places = 0
        elif current_price < 100:
            decimal_places = 1
        else:
            decimal_places = 2

        
        output_format = '{:.{}f} <span color="{}">{:.2f}% {}</span>  <span color="{}">({:.2f}%)</span>'
        print(output_format.format(current_price, decimal_places, color_today, percent_change_today, icon_today, color_ytd, percent_change_ytd)) 

